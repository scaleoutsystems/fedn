syntax = "proto3";

package fedn;

import "google/protobuf/timestamp.proto";

message Response {
    Client sender = 1;
    string response = 2;
}

enum StatusType {
  LOG = 0;
  MODEL_UPDATE_REQUEST = 1;
  MODEL_UPDATE = 2;
  MODEL_VALIDATION_REQUEST = 3;
  MODEL_VALIDATION = 4;
  MODEL_PREDICTION = 5;
  NETWORK = 6;
}

enum LogLevel {
      NONE = 0;
      INFO  = 1;
      DEBUG = 2;
      WARNING = 3;
      ERROR = 4;
      AUDIT = 5;
    }

message Status {
    Client sender = 1;
    string status = 2;
    LogLevel log_level = 3;
    string data = 4;
    string correlation_id = 5;
    google.protobuf.Timestamp timestamp = 6;
    StatusType type = 7;
    string extra = 8;
    string session_id = 9;

}

enum Queue {
  DEFAULT = 0;
  TASK_QUEUE = 1;
}

message TaskRequest {
  Client sender = 1;
  Client receiver = 2;
  string model_id = 3;
  // data is round_config when type is MODEL_UPDATE
  string data = 4;
  string correlation_id = 5;
  string timestamp = 6;
  string meta = 7;
  string session_id = 8;
  StatusType type = 9;
}

message ModelUpdate {
  Client sender = 1;
  Client receiver = 2;
  string model_id = 3;
  string model_update_id = 4;
  string correlation_id = 5;
  string timestamp = 6;
  string meta = 7;
  string config = 8;
}

message ModelValidation {
  Client sender = 1;
  Client receiver = 2;
  string model_id = 3;
  string data = 4;
  string correlation_id = 5;
  google.protobuf.Timestamp timestamp = 6;
  string meta = 7;
  string session_id = 8;
}

message ModelPrediction {
  Client sender = 1;
  Client receiver = 2;
  string model_id = 3;
  string data = 4;
  string correlation_id = 5;
  google.protobuf.Timestamp timestamp = 6;
  string meta = 7;
  string prediction_id = 8;
}

enum ModelStatus {
  OK = 0;
  IN_PROGRESS = 1;
  IN_PROGRESS_OK = 2;
  FAILED = 3;
  UNKNOWN = 4;
}

message ModelRequest {
  Client sender = 1;
  Client receiver = 2;
  bytes data = 3;
  string id = 4;
  ModelStatus status = 5;
}

message ModelResponse {
  bytes data = 1;
  string id = 2;
  ModelStatus status = 3;
  string message = 4;
}

service ModelService {
  rpc Upload(stream ModelRequest) returns (ModelResponse);
  rpc Download(ModelRequest) returns (stream ModelResponse);
}


message GetGlobalModelRequest {
  Client sender = 1;
  Client receiver = 2;
}

message GetGlobalModelResponse {
  Client sender = 1;
  Client receiver = 2;
  string model_id = 3;
}

message Heartbeat {
  Client sender = 1;
}

message ClientAvailableMessage {
  Client sender = 1;
  string data = 2;
  string timestamp = 3;
}

message ListClientsRequest {
  Client sender = 1;
  Queue channel = 2;
}

message ClientList {
  repeated Client client = 1;
}

enum Role {
  OTHER = 0;
  CLIENT = 1;
  COMBINER = 2;
  REDUCER = 3;
}

message Client {
  Role role = 1;
  string name = 2;
  string client_id = 3;
}

message ReassignRequest {
  Client sender = 1;
  Client receiver = 2;
  string server = 3 ;
  uint32 port = 4;

}

message ReconnectRequest {
  Client sender = 1;
  Client receiver = 2;
  uint32 reconnect = 3 ;
}

enum Command {
  IDLE = 0;
  START = 1;
  PAUSE = 2;
  STOP = 3;
  RESET = 4;
  REPORT = 5;
}

message Parameter {
  string key = 1;
  string value = 2;
}

message ControlRequest {
  Command command = 1;
  repeated Parameter parameter = 2;
}

message ControlResponse {
  string message = 1;
  repeated Parameter parameter = 2;
}

service Control {
  rpc Start(ControlRequest) returns (ControlResponse);
  rpc Stop(ControlRequest) returns (ControlResponse);
  rpc FlushAggregationQueue(ControlRequest) returns (ControlResponse);
  rpc SetAggregator(ControlRequest) returns (ControlResponse);
  rpc SetServerFunctions(ControlRequest) returns (ControlResponse);
}

service Reducer {
  rpc GetGlobalModel (GetGlobalModelRequest) returns (GetGlobalModelResponse);
}

message ConnectionRequest {

}

enum ConnectionStatus {
  NOT_ACCEPTING = 0;
  ACCEPTING = 1;
  TRY_AGAIN_LATER = 2;
}

message ConnectionResponse {
  ConnectionStatus status = 1;
}

service Connector {
    // Stream endpoint for status updates
    rpc AllianceStatusStream (ClientAvailableMessage) returns (stream Status);

    // Report endpoint
    rpc SendStatus (Status) returns (Response);
//    rpc RegisterClient (ClientAvailableMessage) returns (Response);
    // List active clients endpoint
    rpc ListActiveClients (ListClientsRequest) returns (ClientList);

    rpc AcceptingClients (ConnectionRequest) returns (ConnectionResponse);

    // Client messaging to stay engaged.
    rpc SendHeartbeat (Heartbeat) returns (Response);

    rpc ReassignClient (ReassignRequest) returns (Response);
    rpc ReconnectClient (ReconnectRequest) returns (Response);
}

service Combiner {

    // Stream endpoints for training/validation pub/sub
    rpc TaskStream (ClientAvailableMessage) returns (stream TaskRequest);

    rpc SendModelUpdate (ModelUpdate) returns (Response);
    rpc SendModelValidation (ModelValidation) returns (Response);
    rpc SendModelPrediction (ModelPrediction) returns (Response);

}

message ProvidedFunctionsRequest {
  string function_code = 1;
}

message ProvidedFunctionsResponse {
  map<string, bool> available_functions = 1;
}

message ClientConfigRequest {
  bytes data = 1;
}

message ClientConfigResponse {
  string client_settings = 1;
}

message ClientSelectionRequest {
  string client_ids = 1;
}

message ClientSelectionResponse {
  string client_ids = 1;
}

message ClientMetaRequest {
  string metadata = 1;
  string client_id = 2;
}

message ClientMetaResponse {
  string status = 1;
}

message StoreModelRequest {
  bytes data = 1;
  string id = 2;
}

message StoreModelResponse {
  string status = 1;
}

message AggregationRequest {
  string aggregate = 1;
}

message AggregationResponse {
  bytes data = 1;
}

service FunctionService {
  rpc HandleProvidedFunctions(ProvidedFunctionsRequest) returns (ProvidedFunctionsResponse);
  rpc HandleClientConfig (stream ClientConfigRequest) returns (ClientConfigResponse);
  rpc HandleClientSelection (ClientSelectionRequest) returns (ClientSelectionResponse);
  rpc HandleMetadata (ClientMetaRequest) returns (ClientMetaResponse);
  rpc HandleStoreModel (stream StoreModelRequest) returns (StoreModelResponse);
  rpc HandleAggregation (AggregationRequest) returns (stream AggregationResponse);
}