Vertical FL with Split Learning in FEDn
=======================================

To run the commands, first git clone this repository and switch to the branch containing this code. 
In order to be able to run this example, you need to install FEDn. 
It is best if you create a virtual environment for this. 

.. code-block:: bash

    git clone https://github.com/scaleoutsystems/fedn.git
    cd fedn
    pip install fedn

In your /etc/hosts file, add the following lines:

.. code-block:: text

    127.0.0.1    localhost
    127.0.0.1    combiner
    127.0.0.1    minio
    127.0.0.1    mongo


Data Preparation
----------------

Make sure the diabetes dataset is downloaded in the splitlearning_diabetes/data folder with the files "labels.csv", "train.csv" and "test.csv".
For convenience, the dataset is already provided. If necessary, it can be downloaded from https://www.kaggle.com/datasets/uciml/pima-indians-diabetes-database?resource=download.

We split the vertically dataset between 2 clients. For this, locate yourself in the *examples/splitlearning_diabetes/client* folder

.. code-block:: bash

    cd examples/splitlearning_diabetes/client

and run the following command to generate the data for the two clients:

.. code-block:: bash

    python3 data.py

Compute Package
---------------

Then, locate yourself into the examples/splitlearning_diabetes folder:

.. code-block:: bash

    cd ..

To create the compute package, run:

.. code-block:: bash

    fedn package create --path client

Note: For split learning, we do not need a seed model in contrast to horizontal federated learning. 

Local Setup with FEDn
---------------------

To execute the split learning example on your local machine, run the following commands in different terminals (docker is required).

To start mongo and minio:

.. code-block:: bash

    docker compose up -d mongo minio

We need to set some environment variables in order to let the system know where to find the data and labels. 
In another terminal (make sure to be located in the examples/splitlearning_diabetes folder), set the compute package environment variable and start the controller.

.. code-block:: bash

    export FEDN_COMPUTE_PACKAGE_DIR=.
    fedn controller start

Now, we set the path to the labels.pt file in the client folder and start the combiner (from another terminal, again from the examples/splitlearning_diabetes folder)

.. code-block:: bash

    export FEDN_LABELS_PATH=./client/data/clients/labels.pt
    fedn combiner start

.. note:: 

    For convenience, you can run the following docker compose command to start controller, combiner, mongo and minio, together with the correct environment variables:

    .. code-block:: bash

        docker compose \
        -f ../../docker-compose.yaml \
        -f docker-compose.override.dev.yaml \
        up

Now, we will connect 2 clients. Open 2 new terminals and locate yourself into the splitlearning_diabetes folder. As both clients should have access to their respective vertical dataset, 
the datapath should be set to the different data folders that are generated by the data.py script.  
To start the first client, run:

.. code-block:: bash

    export FEDN_DATA_PATH=./data/clients/1/diabetes.pt 
    fedn client start --api-url http://localhost:8092 --local-package

and to start the second client, run:

.. code-block:: bash

    export FEDN_DATA_PATH=./data/clients/2/diabetes.pt 
    fedn client start --api-url http://localhost:8092 --local-package

.. note:: 

    Instead of setting up the clients manually, you can also run the following docker compose command. It will set up all server-side (controller, combiner, etc.) and the 2 clients automatically inside a docker container. 
    All environment variables are handled as well. 

    .. code-block:: bash

        docker compose \
        -f ../../docker-compose.yaml \
        -f docker-compose.override.yaml \
        up


Starting the Split Learning Training
-------------------------------------

We are going to start the training through the API Client. 
Go to the *run_splitlearning.ipynb* file in the *splitlearning_diabetes* folder and execute the cells. 
The splitlearning session will start running. 

Clean-up
---------

After the training is finished, run the following command for clean-up:

.. code-block:: bash

    docker compose down -v

Modifying the example
---------------------

In order to change the split learning model architecture, you need to modify two files: 
The *model.py* file to change the client-side model, and the *splitlearningagg.py* file 
in the *combiner* folder to change the server-side model. 

Update the *data.py* file if you want to change the dataset. 



